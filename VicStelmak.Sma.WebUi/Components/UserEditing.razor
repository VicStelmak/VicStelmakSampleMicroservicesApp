@using VicStelmak.Sma.WebUi.Identity.Requests
@using VicStelmak.Sma.WebUi.Identity.Responses

@if (ModalWindowIsShown == true)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Update User</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => CloseModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    @if (ViewModel != null)
                    {
                        <EditForm Model="@ViewModel" OnValidSubmit="@OnValidSubmitAsync">
                            <DataAnnotationsValidator />
                            <div class="form-group">
                                <label>First Name</label>
                                <InputText class="form-control" @bind-Value="ViewModel.FirstName" />
                                <ValidationMessage For="@(() => ViewModel.FirstName)" />
                            </div>
                            <div class="form-group">
                                <label>Last Name</label>
                                <InputText class="form-control" @bind-Value="ViewModel.LastName" />
                                <ValidationMessage For="@(() => ViewModel.LastName)" />
                            </div>
                            <div class="form-group">
                                <label>Email</label>
                                <InputText class="form-control" @bind-Value="ViewModel.Email" />
                                <ValidationMessage For="@(() => ViewModel.Email)" />
                            </div>
                            <label>Roles</label>
                            @foreach (var roleName in ViewModel.Roles)
                            {
                                <div class="form-group">
                                    <input type="checkbox" checked="@CheckIfUserHaveRole(roleName)" @onchange="arguments => ToggleRoleSelection(arguments, roleName)" />
                                    @roleName <br />
                                </div>
                            }
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => CloseModal()">Cancel</button>
                                <button type="submit" class="btn btn-primary">Update</button>
                            </div>
                        </EditForm>
                    }        
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<(UpdateUserRequest, List<string>, List<string>)> UpdateButtonClicked { get; set; }
    [Parameter]
    public string UserId { get; set; }

    private bool ModalWindowIsShown { get; set; }
    private UserEditingViewModel ViewModel { get; set; }

    private async Task OnUpdateButtonClickedAsync(UpdateUserRequest request, List<string> rolesToDelete, List<string> selectedRoles)
    {
        ModalWindowIsShown = false;

        await UpdateButtonClicked.InvokeAsync((request, rolesToDelete, selectedRoles));
    }

    private bool CheckIfUserHaveRole(string roleName)
    {
        if (ViewModel.UserRoles.Contains(roleName))
        {
            return true;
        }
        else return false;
    }

    internal void CloseModal()
    {
        ModalWindowIsShown = false;
    }

    private async Task OnValidSubmitAsync()
    {
        var request = new UpdateUserRequest(ViewModel.Email, ViewModel.FirstName, ViewModel.LastName);

        await OnUpdateButtonClickedAsync(request, ViewModel.RolesToDelete, ViewModel.RolesSelected);
    }

    internal async void ShowModalAsync()
    {
        var user = await _identityService.GetUserByIdAsync(UserId);
        ViewModel = new(user);

        ModalWindowIsShown = true;

        StateHasChanged();
    }

    public async Task ToggleRoleSelection(ChangeEventArgs arguments, string roleName)
    {
        bool isSelected = (bool)arguments.Value;

        if (isSelected == true)
        {
            ViewModel.RolesSelected.Add(roleName);
            ViewModel.RolesToDelete.Remove(roleName);
        }
        else
        {
            ViewModel.RolesSelected.Remove(roleName);
            ViewModel.RolesToDelete.Add(roleName);
        }
    }
}
