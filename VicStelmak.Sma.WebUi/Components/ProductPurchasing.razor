@inject IOrderService _orderService

@using VicStelmak.Sma.WebUiDataLibrary.Order
@using VicStelmak.Sma.WebUiDataLibrary.Order.Requests
@using VicStelmak.Sma.WebUiDataLibrary.Product.Dtos
@using VicStelmak.Sma.WebUiDataLibrary.Validators

@if (ModalWindowIsShown == true)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Purchase Product (@ViewModel.ProductName)</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => CloseModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="align-content:center">
                    @if (ViewModel != null)
                    {
                        <EditForm Model="@ViewModel" OnValidSubmit="@HandleValidSubmitAsync">
                            <FluentValidationValidator @ref="ValidationComponent" Options="@(options => options.IncludeAllRuleSets())" Validator="ProductValidator" />

                            <div class="form-group">
                                <label class="form-control-label">Amount to Purchase</label>
                                <InputNumber class="form-control" @bind-Value="ViewModel.AmountToPurchase" />
                                <ValidationMessage For="@(() => ViewModel.AmountToPurchase)" />
                            </div>
                            <br />
                            <div class="form-group">
                                <label class="form-control-label">Email Address</label>
                                <InputText class="form-control" @bind-Value="ViewModel.Email" />
                                <ValidationMessage For="@(() => ViewModel.Email)" />
                            </div>
                            <br />
                            <h5>Delivery Address:</h5>
                            <div class="form-group">
                                <label class="form-control-label">Postal Code</label>
                                <InputText class="form-control" @bind-Value="ViewModel.PostalCode" />
                                <ValidationMessage For="@(() => ViewModel.PostalCode)" />
                            </div>
                            <div class="form-group">
                                <label class="form-control-label">Apartment Number</label>
                                <InputNumber class="form-control" @bind-Value="ViewModel.Apartment" />
                                <ValidationMessage For="@(() => ViewModel.Apartment)" />
                            </div>
                            <div class="form-group">
                                <label class="form-control-label">Building Number</label>
                                <InputText class="form-control" @bind-Value="ViewModel.Building" />
                                <ValidationMessage For="@(() => ViewModel.Building)" />
                            </div>
                            <div class="form-group">
                                <label class="form-control-label">Street</label>
                                <InputText class="form-control" @bind-Value="ViewModel.Street" />
                                <ValidationMessage For="@(() => ViewModel.Street)" />
                            </div>
                            <div class="form-group">
                                <label class="form-control-label">City</label>
                                <InputText class="form-control" @bind-Value="ViewModel.City" />
                                <ValidationMessage For="@(() => ViewModel.City)" />
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => CloseModal()">Cancel</button>
                                    <button type="submit" class="btn btn-primary">Purchase</button>
                                </div>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public string? AuthenticatedUserName { get; set; }
    [Parameter]
    public int ProductId { get; set; }
    [Parameter]
    public ProductDetailsInTable ProductPage { get; set; }

    private bool ModalWindowIsShown { get; set; }
    private FluentValidationValidator? ValidationComponent;
    private ProductPurchasingViewModel ViewModel { get; set; }
    private ProductDto Product { get; set; }
    private ProductPurchasingViewModelValidator ProductValidator { get; set; }

    private async Task HandleValidSubmitAsync()
    {
        bool userExists = await _identityService.CheckIfUserExistsByEmailAsync(ViewModel.Email);

        if (userExists == false)
        {
            var submitOrderRequest = new SendOrderSubmittingEventRequest(
                ViewModel.Apartment,
                ViewModel.Building,
                ViewModel.City,
                ViewModel.Email,
                ViewModel.PostalCode,
                ProductId,
                ViewModel.AmountToPurchase,
                ViewModel.Street,
                ViewModel.AmountToPurchase * Product.Price,
                false);

            await _orderService.SendOrderSubmittingEventAsync(submitOrderRequest);
        }
        if (userExists == true)
        {
            bool orderExists = await _orderService.CheckIfPendingOrderExistsAsync(ViewModel.Email);

            if (orderExists == false)
            {
                var orderCreatingRequest = new CreateOrderRequest(
                    ViewModel.Apartment,
                    ViewModel.Building,
                    ViewModel.City,
                    ViewModel.Email,
                    ViewModel.PostalCode,
                    ProductId,
                    ViewModel.AmountToPurchase,
                    ViewModel.Street,
                    ViewModel.AmountToPurchase * Product.Price);

                await _orderService.CreateOrderAsync(orderCreatingRequest);
            }
            else
            {
                var order = await _orderService.FindPendingOrderByUserEmailAsync(ViewModel.Email);
                var lineItemAddingRequest = new AddLineItemToOrderRequest(order.OrderId, ViewModel.Email, ProductId, ViewModel.AmountToPurchase);

                await _orderService.AddLineItemToOrderAsync(lineItemAddingRequest);

                var product = await _productService.GetProductByIdAsync(ProductId);
                var updateRequest = new UpdateOrderRequest(order.QuantityOfProducts + lineItemAddingRequest.Quantity, OrderStatus.Pending.ToString(),
                    order.Total + (product.Price * lineItemAddingRequest.Quantity), lineItemAddingRequest.OrderUpdatedBy);

                await _orderService.UpdateOrderAsync(order.OrderId, updateRequest);
            }
        }

        SetProductDetailsInTableDataAsync();

        CloseModal();
    }

    private void SetProductDetailsInTableDataAsync()
    {
        var updatedProduct = new ProductDto(
            ProductId,
            Product.AmountInStock - ViewModel.AmountToPurchase, 
            Product.AmountSold + ViewModel.AmountToPurchase, 
            Product.CreatedAt,
            Product.CreatedBy,
            Product.Description,
            Product.ImageUri,
            Product.Name,
            Product.Price,
            DateTime.UtcNow,
            ViewModel.Email
        );

        ProductPage.SetProductDetailsInTableDataAsync(updatedProduct);
    }

    internal void CloseModal()
    {
        ModalWindowIsShown = false;
    }

    internal async void ShowModalAsync()
    {
        Product = await _productService.GetProductByIdAsync(ProductId);
        ProductValidator = new(Product.AmountInStock);
        ViewModel = new(AuthenticatedUserName, Product.Name);

        ModalWindowIsShown = true;

        StateHasChanged();
    }
}
