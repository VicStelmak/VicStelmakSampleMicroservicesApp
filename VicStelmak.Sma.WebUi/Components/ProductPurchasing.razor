@using VicStelmak.Sma.WebUiDataLibrary.Order.Requests
@using VicStelmak.Sma.WebUiDataLibrary.Order.Responses
@using VicStelmak.Sma.WebUiDataLibrary.Validators

@if (ModalWindowIsShown == true)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Purchase Product (@ViewModel.ProductName)</h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => CloseModal()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body" style="align-content:center">
                    @if (ViewModel != null)
                    {
                        <EditForm Model="@ViewModel" OnValidSubmit="@HandleValidSubmitAsync">
                            <FluentValidationValidator @ref="ValidationComponent" Options="@(options => options.IncludeAllRuleSets())" 
                                Validator="ProductValidator" />
                            <div class="form-group">
                                <label class="form-control-label">Amount to Purchase</label>
                                <InputNumber class="form-control" @bind-Value="ViewModel.AmountToPurchase" />
                                <ValidationMessage For="@(() => ViewModel.AmountToPurchase)" />
                            </div>
                            <br />
                            @if (AuthenticatedUserName is null)
                            {
                                <div class="form-group">
                                    <label class="form-control-label">Email Address</label>
                                    <InputText class="form-control" Value="@ViewModel.Email" ValueChanged="HandleInputEmailChangeAsync" 
                                    ValueExpression="() => ViewModel.Email" />
                                    <ValidationMessage For="@(() => ViewModel.Email)" />
                                </div>
                            }
                            else if (AuthenticatedUserName is not null && UserExists == true)
                            {
                                <div class="form-group">
                                    <label class="form-control-label">Email Address</label>
                                    <InputText class="form-control" @bind-Value="ViewModel.Email" disabled />
                                    <ValidationMessage For="@(() => ViewModel.Email)" />
                                </div>
                            }
                            <br />
                            <h5>Delivery Address:</h5>
                            @if (OrderExists == false)
                            {
                                <div class="form-group">
                                    <label class="form-control-label">Postal Code</label>
                                    <InputText class="form-control" @bind-Value="ViewModel.PostalCode" />
                                    <ValidationMessage For="@(() => ViewModel.PostalCode)" />
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label">Apartment Number</label>
                                    <InputNumber class="form-control" @bind-Value="ViewModel.Apartment" />
                                    <ValidationMessage For="@(() => ViewModel.Apartment)" />
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label">Building Number</label>
                                    <InputText class="form-control" @bind-Value="ViewModel.Building" />
                                    <ValidationMessage For="@(() => ViewModel.Building)" />
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label">Street</label>
                                    <InputText class="form-control" @bind-Value="ViewModel.Street" />
                                    <ValidationMessage For="@(() => ViewModel.Street)" />
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label">City</label>
                                    <InputText class="form-control" @bind-Value="ViewModel.City" />
                                    <ValidationMessage For="@(() => ViewModel.City)" />
                                </div>
                            }
                            else
                            {
                                <p style="color:red">Pending order with notified address already exists. All new products will be added to it.</p>
                                <div class="form-group">
                                    <label class="form-control-label">Postal Code</label>
                                    <InputText class="form-control" @bind-Value="ViewModel.PostalCode" disabled />
                                    <ValidationMessage For="@(() => ViewModel.PostalCode)" />
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label">Apartment Number</label>
                                    <InputNumber class="form-control" @bind-Value="ViewModel.Apartment" disabled />
                                    <ValidationMessage For="@(() => ViewModel.Apartment)" />
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label">Building Number</label>
                                    <InputText class="form-control" @bind-Value="ViewModel.Building" disabled />
                                    <ValidationMessage For="@(() => ViewModel.Building)" />
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label">Street</label>
                                    <InputText class="form-control" @bind-Value="ViewModel.Street" disabled />
                                    <ValidationMessage For="@(() => ViewModel.Street)" />
                                </div>
                                <div class="form-group">
                                    <label class="form-control-label">City</label>
                                    <InputText class="form-control" @bind-Value="ViewModel.City" disabled />
                                    <ValidationMessage For="@(() => ViewModel.City)" />
                                </div>
                            }
                            <br />
                            <div class="row">
                                <div class="col-md-12 text-right">
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => CloseModal()">Cancel</button>
                                    <button type="submit" class="btn btn-primary">Purchase</button>
                                </div>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public string? AuthenticatedUserName { get; set; }
    [Parameter]
    public int ProductId { get; set; }
    [Parameter]
    public ProductDetailsInTable ProductPage { get; set; }

    private bool ModalWindowIsShown { get; set; }
    private bool OrderExists { get; set; }
    private bool UserExists { get; set; }

    private FindPendingOrderResponse Order { get; set; }
    private FluentValidationValidator? ValidationComponent;
    private GetOrderResponse OrderDetailedData { get; set; }
    private ProductPurchasingViewModel ViewModel { get; set; }
    private ProductDto Product { get; set; }
    private ProductPurchasingViewModelValidator ProductValidator { get; set; }

    private async Task HandleInputEmailChangeAsync(string userEmail)
    {
        ViewModel.Email = userEmail;
        OrderExists = await _orderService.CheckIfPendingOrderExistsAsync(ViewModel.Email);
        UserExists = await _identityService.CheckIfUserExistsByEmailAsync(ViewModel.Email);

        if (OrderExists == true && UserExists == true)
        {
            Order = await _orderService.FindPendingOrderByUserEmailAsync(ViewModel.Email);
            OrderDetailedData = await _orderService.GetOrderByIdAsync(Order.OrderId);

            ViewModel.Apartment = OrderDetailedData.Apartment;
            ViewModel.Building = OrderDetailedData.Building;
            ViewModel.City = OrderDetailedData.City;
            ViewModel.PostalCode = OrderDetailedData.PostalCode;
            ViewModel.Street = OrderDetailedData.Street;

            StateHasChanged();
        }
        else
        {
            ViewModel.Apartment = default(int);
            ViewModel.Building = null;
            ViewModel.City = null;
            ViewModel.PostalCode = null;
            ViewModel.Street = null;

            StateHasChanged();
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        if (UserExists == false)
        {
            var submitOrderRequest = new SendOrderSubmittingEventRequest(
                ViewModel.Apartment,
                ViewModel.Building,
                ViewModel.City,
                ViewModel.Email,
                ViewModel.PostalCode,
                ProductId,
                ViewModel.AmountToPurchase,
                ViewModel.Street,
                ViewModel.AmountToPurchase * Product.Price);

            await _orderService.SendOrderSubmittingEventAsync(submitOrderRequest);
        }
        else
        {
            if (OrderExists == false)
            {
                var orderCreatingRequest = new CreateOrderRequest(
                    ViewModel.Apartment,
                    ViewModel.Building,
                    ViewModel.City,
                    ViewModel.Email,
                    ViewModel.AmountToPurchase * Product.Price,
                    ViewModel.PostalCode,
                    ProductId,
                    ViewModel.AmountToPurchase,
                    ViewModel.Street,
                    ViewModel.AmountToPurchase * Product.Price);

                await _orderService.CreateOrderAsync(orderCreatingRequest);
            }
            else
            {
                Order = await _orderService.FindPendingOrderByUserEmailAsync(ViewModel.Email);
                OrderDetailedData = await _orderService.GetOrderByIdAsync(Order.OrderId);

                var lineItemCreatingRequest = new CreateLineItemRequest(
                    Order.OrderId, 
                    ViewModel.Email, 
                    ProductId, 
                    ViewModel.AmountToPurchase, 
                    Product.Price * ViewModel.AmountToPurchase);

                await _orderService.CreateLineItemAsync(lineItemCreatingRequest);

                var updateRequest = new UpdateOrderRequest(
                    OrderDetailedData.Apartment, 
                    OrderDetailedData.Building, 
                    OrderDetailedData.City, 
                    OrderDetailedData.PostalCode,
                    Order.QuantityOfProducts + lineItemCreatingRequest.Quantity, 
                    OrderStatus.Pending.ToString(),
                    OrderDetailedData.Street,
                    Order.Total + lineItemCreatingRequest.TotalPrice, 
                    lineItemCreatingRequest.OrderUpdatedBy);

                await _orderService.UpdateOrderAsync(Order.OrderId, updateRequest);
            }
        }

        await SetProductDetailsInTableDataAsync(UserExists);

        CloseModal();
    }

    private async Task SetProductDetailsInTableDataAsync(bool userExists)
    {
        await ProductPage.SetProductDetailsInTableDataAsync(ProductId, userExists);
    }

    internal void CloseModal()
    {
        OrderExists = default(bool);
        UserExists = default(bool);

        ModalWindowIsShown = false;
    }

    internal async void ShowModalAsync()
    {
        Product = await _productService.GetProductByIdAsync(ProductId);
        ProductValidator = new(Product.AmountInStock);
        ViewModel = new(AuthenticatedUserName, Product.Name);

        if (ViewModel.Email is not null)
        {
            UserExists = await _identityService.CheckIfUserExistsByEmailAsync(ViewModel.Email);

            if (UserExists == true)
            {
                OrderExists = await _orderService.CheckIfPendingOrderExistsAsync(ViewModel.Email);

                if (OrderExists == true)
                {
                    Order = await _orderService.FindPendingOrderByUserEmailAsync(ViewModel.Email);
                    OrderDetailedData = await _orderService.GetOrderByIdAsync(Order.OrderId);

                    ViewModel.Apartment = OrderDetailedData.Apartment;
                    ViewModel.Building = OrderDetailedData.Building;
                    ViewModel.City = OrderDetailedData.City;
                    ViewModel.PostalCode = OrderDetailedData.PostalCode;
                    ViewModel.Street = OrderDetailedData.Street;
                }
            }
        }

        ModalWindowIsShown = true;

        StateHasChanged();
    }
}
