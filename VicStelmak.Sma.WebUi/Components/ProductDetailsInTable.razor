@inject IOrderService _orderService

@using VicStelmak.Sma.WebUiDataLibrary.Identity.Enums
@using VicStelmak.Sma.WebUiDataLibrary.Order
@using VicStelmak.Sma.WebUiDataLibrary.Product.Dtos

<tr>
    <td>@SequenceNumber</td>
    <td>@ViewModel.Name</td>
    <td>@ViewModel.Description</td>
    <td>@ViewModel.Price</td>
    <td>@ViewModel.AmountInStock</td>
    <AuthorizeView Roles="@($"{Role.Administrator}, {Role.User}")">
        <td>@ViewModel.AmountSold</td>
        <td>@ViewModel.CreatedAt <br />by @ViewModel.CreatedBy</td>

        @if (ViewModel.UpdatedAt != default(DateTime))
        {
            <td>@ViewModel.UpdatedAt <br />by @ViewModel.UpdatedBy</td>
        }
        else
        {
            <td></td>
        }
    </AuthorizeView>
    <td>
        <img src="@ViewModel.ImageUri" alt="Product Image" style="width:100px;height:100px" />
    </td>
    <td class="text-right">
        <ProductPurchasing @ref="ProductPurchasingModalWindow" ProductId="Product.Id" ProductPage="this"></ProductPurchasing>
        <button class="btn btn-primary btn-sm" @onclick="@(() => ProductPurchasingModalWindow.ShowModalAsync())">Purchase</button>
        <AuthorizeView Roles="@($"{Role.Administrator}, {Role.User}")">
            <ProductEditing @ref="ProductEditingModalWindow" ProductId="Product.Id" UpdateButtonClicked="OnUpdateButtonClickedAsync"></ProductEditing>
            <button class="btn btn-secondary btn-sm" @onclick="@(() => ProductEditingModalWindow.ShowModalAsync())">Update</button>
            <ProductDeletionConfirmation @ref="ProductDeletionConfirmationModalWindow" ProductId="Product.Id" 
            DeleteButtonClicked="OnDeleteButtonClickedAsync"></ProductDeletionConfirmation>
            <button class="btn btn-danger btn-sm" @onclick="@(() => ProductDeletionConfirmationModalWindow.ShowModalAsync())">Delete</button>
        </AuthorizeView>
    </td>
</tr>

@code {
    [Parameter]
    public ProductDto Product { get; set; }
    [Parameter]
    public EventCallback ProductDeleted { get; set; }
    [Parameter]
    public EventCallback ProductUpdated { get; set; }
    [Parameter]
    public int SequenceNumber { get; set; }

    private ProductDeletionConfirmation? ProductDeletionConfirmationModalWindow { get; set; }
    private ProductEditing? ProductEditingModalWindow { get; set; }
    private ProductPurchasing? ProductPurchasingModalWindow { get; set; }
    private ProductDetailsInTableViewModel ViewModel { get; set; } = new();

    private async Task OnDeleteButtonClickedAsync(int productId)
    {
        await _productService.DeleteProductAsync(productId);
        await ProductDeleted.InvokeAsync();
    }

    private async Task OnUpdateButtonClickedAsync(UpdateProductDto productDto)
    {
        await _productService.UpdateProductAsync(Product.Id, productDto);
        await ProductUpdated.InvokeAsync();
    }

    protected override void OnInitialized()
    {
        ViewModel = new(Product, SequenceNumber);
    }

    protected override void OnParametersSet()
    {
        ViewModel = new(Product, SequenceNumber);
    }

    internal void SetProductDetailsInTableDataAsync(ProductDto updatedProduct)
    {
        ViewModel.AmountInStock = updatedProduct.AmountInStock;
        ViewModel.AmountSold = updatedProduct.AmountSold;
        ViewModel.UpdatedAt = updatedProduct.UpdatedAt;
        ViewModel.UpdatedBy = updatedProduct.UpdatedBy;

        StateHasChanged();
    }
}
