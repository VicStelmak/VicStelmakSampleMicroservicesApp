@using VicStelmak.SMA.WebUI.Identity.Enums
@using VicStelmak.SMA.WebUI.Identity.Requests
@using VicStelmak.SMA.WebUI.Identity.Responses

<tr>
    <td>@SequenceNumber</td>
    <td>@User.FirstName</td>
    <td>@User.LastName</td>
    <td>@User.Email</td>
    <td>
        @foreach (string role in User.Roles.OrderBy(role => role).ToList())
        {
            <text>@role</text>
            <br />
        }
    </td>
    <td class="text-right">
        <UserEditing @ref="UserEditingModalWindow" UpdateButtonClicked="@((arguments) => OnUpdateButtonClickedAsync(arguments.Item1,arguments.Item2,arguments.Item3))" 
            UserId="@User.Id"></UserEditing>
        <button class="btn btn-secondary btn-sm" @onclick="@(() => UserEditingModalWindow.ShowModalAsync())">Update</button>
        <UserDeletionConfirmation @ref="UserDeletionConfirmationModalWindow" DeleteButtonClicked="OnDeleteButtonClickedAsync" Email="@User.Email"></UserDeletionConfirmation>
        <button class="btn btn-danger btn-sm" @onclick="@(() => UserDeletionConfirmationModalWindow.ShowModal())">Delete</button>
    </td>
</tr>

@code {
    [Parameter]
    public string? AuthenticatedUserId { get; set; }
    [Parameter]
    public EventCallback UserDeleted { get; set; }
    [Parameter]
    public EventCallback UserUpdated { get; set; }
    [Parameter]
    public int SequenceNumber { get; set; }
    [Parameter]
    public GetUserResponse User { get; set; }

    private UserDeletionConfirmation? UserDeletionConfirmationModalWindow { get; set; }
    private UserEditing? UserEditingModalWindow { get; set; }

    private async Task OnDeleteButtonClickedAsync(bool deleteIsConfirmed)
    {
        if (deleteIsConfirmed == true)
        {
            await _identityService.DeleteUserAsync(User.Id);

            if (AuthenticatedUserId == User.Id)
            {
                await _identityService.LogoutAsync();
            }

            await UserDeleted.InvokeAsync();
        }
    }

    private async Task OnUpdateButtonClickedAsync(UpdateUserRequest request, List<string> rolesToDelete, List<string> selectedRoles)
    {
        if (!request.Email.Equals(User.Email) | !request.FirstName.Equals(User.FirstName) | !request.LastName.Equals(User.LastName))
        {
            await _identityService.UpdateUserAsync(User.Id, request);
        }
        if (rolesToDelete.Count() > 0)
        {
            await _identityService.DeleteRolesFromUserAsync(User.Id, rolesToDelete);
        }
        if (selectedRoles.Count() > 0)
        {
            foreach (string roleName in selectedRoles)
            {
                if (User.Roles.Contains(roleName) != true)
                {
                    await _identityService.AddRoleToUserAsync(roleName, User.Id);
                }
            }
        }

        await UserUpdated.InvokeAsync();
    }
}
